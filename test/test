#!/usr/bin/env bash
#
# test
#

# go to own dir
cd "$(dirname "$BASH_SOURCE")"

# vars to keep track of number of tests run
t=1
expected=29

# some helpers

tap() {
  if [ $? = 0 ]
  then
    echo "✔  passed test #$t: $1"
  else
    echo "✘  failed test #$t: $1" >&2
    summarize
    exit 1
  fi
  ((t++))
}

check_version() {
  # strip version of leading, non-number characters
  v="$(echo "$1" | sed "s/[^0-9]*\(.*\)/\1/")"
  test "$v" = "$2"
  tap "$v = $2 - $3"
}

summarize() {
  [ $((--t)) = $expected ] && status="success" || status="failure"
  echo ""
  echo "------------------ $status ------------------"
  echo "$t of $expected tests passed"
}

teardown() {
  rm -rf tmp
}


# test bootstrapping
test_bootstrap() {
  teardown
  
  # download vpkgfile
  url="file://$(pwd)/../vpkgfile"
  echo "downloading $url..."
  vpkgfile="$(curl -f# "$url")"
  tap "download vpkgfile"
  
  # bootstrap
  mkdir tmp
  echo "$vpkgfile" | bash -s bootstrap "$(pwd)"/tmp
  tap "bootstrap - create dirs and config"
  
  # source fresh config
  source tmp/.vpkg
  tap "bootstrap - validate config"
  
  # check our binary linked properly
  test "$(which vpkg)" = "$VPKG_ROOT/bin/vpkg"
  tap "bootstrap - test vpkg link"
  
  # include the vpkg function library
  source tmp/lib/vpkg/versions/current/lib/functions
  tap "bootstrap - include vpkg function library"
}

# vpkgfile tests
test_vpkgfile() {
  
  # install
  echo "file://$(pwd)/fixtures/nodejs/vpkgfile" | vpkg install nodejs
  tap "install nodejs"
  
  # install alt
  vpkg install nodejs 0.8.6
  tap "install nodejs 0.8.6"
  
  # install custom
  vpkg install nodejs development 0.9.9
  tap "install nodejs custom version 'development' from 0.9.9"
  
  # link
  vpkg link nodejs 0.8.6
  tap "link nodejs 0.8.6"
  check_version "$(node -v)" "0.8.6" "check link version"
  test "$(which node)" = "$VPKG_ROOT"/bin/node
  tap "confirm link"
  
  # link
  vpkg link nodejs development
  tap "link nodejs development (0.9.9)"
  check_version "$(node -v)" "0.9.9" "check link version"
  test ! -e "$VPKG_ROOT"/bin/node-waf
  tap "confirm 0.8.6 was unlinked (0.9.9 does not include node-waf)"
  
  # use
  vpkg-use nodejs 0.8.20
  tap "use nodejs 0.8.20"
  check_version "$(node -v)" "0.8.20" "check use version"

  # unuse
  vpkg-unuse nodejs 0.8.20
  tap "unuse nodejs 0.8.20"
  check_version "$(node -v)" "0.9.9" "check unuse version"
  
  # uninstall
  vpkg uninstall nodejs development
  tap "uninstall nodejs development"
  test "$(which node)" != "$VPKG_ROOT"/bin/node
  tap "confirm uninstall also unlinked"
  
  # link again
  vpkg link nodejs 0.8.6
  tap "relink nodejs 0.8.6"
  
  # test version specify unlink
  vpkg unlink nodejs 0.8.6
  tap "unlink nodejs 0.8.6"
  test "$(which node)" != "$VPKG_ROOT"/bin/node
  tap "confirm unlink"
  
  # leave nodejs 0.8.20 linked
  vpkg link nodejs 0.8.20
  tap "relink nodejs 0.8.20"
}

# sans vpkgfile
test_raw() {
  
  # setup (pretend we created this package by hand)
  pkg="$VPKG_ROOT"/lib/raw-src
  mkdir -p "$pkg"
  cp -R fixtures/raw-src "$pkg"/src
  
  # install
  vpkg install raw-src 0.0.1
  tap "install raw-src 0.0.1"
  
  # alt
  vpkg install raw-src 0.0.2
  tap "install raw-src 0.0.2"
  
  # link 
  vpkg link raw-src 0.0.1
  tap "link raw-src 0.0.1"
  check_version "$(raw-src --version)" "0.0.1" "check link version"
  test "$(which raw-src)" = "$VPKG_ROOT"/bin/raw-src
  tap "confirm link"
}

# test bootstrapping
test_bootstrap

# test a package with a vpkgfile
test_vpkgfile

# test a package with no vpkgfile
test_raw

# display a summary if we made it this far
summarize
