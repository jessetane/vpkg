#
# test
#

# go to own dir
cd "$(dirname "$BASH_SOURCE")"

# vars to keep track of number of tests run
t=1
expected=20

# some helpers

tap() {
  if [ $? = 0 ]
  then
    echo "✔  passed test #$t: $1"
  else
    echo "✘  failed test #$t: $1" >&2
    summarize
    exit 1
  fi
  ((t++))
}

clean_version() {
  while read data
  do
    echo "$data" | sed "s/[^0-9]*\(.*\)/\1/"
  done
}

summarize() {
  [ $((--t)) = $expected ] && status="success" || status="failure"
  echo ""
  echo "------------------ $status ------------------"
  echo "$t of $expected tests passed"
}

teardown() {
  rm -rf tmp
}


# test bootstrapping
test_bootstrap() {
  teardown
  
  # download vpkgfile
  url="file://$(pwd)/../vpkgfile"
  echo "downloading $url..."
  vpkgfile="$(curl -f# "$url")"
  tap "download vpkgfile"
  
  # bootstrap
  mkdir tmp
  echo "$vpkgfile" | bash -s bootstrap "$(pwd)"/tmp
  tap "bootstrap - create dirs and config"
  
  # source fresh config
  source tmp/.vpkg
  tap "bootstrap - validate config"
  
  # check our binary linked properly
  test $(which vpkg) = "$VPKG_ROOT/bin/vpkg"
  tap "bootstrap - test vpkg link"
  
  # include the vpkg function library
  source tmp/lib/vpkg/versions/current/lib/functions
  tap "bootstrap - include vpkg function library"
}

# vpkgfile tests
test_vpkgfile() {
  fixture_name="nodejs"
  fixture_version_main="0.8.20"
  fixture_version_alt="0.9.9"
  fixture_bin="node"

  # install
  echo "file://$(pwd)/fixtures/$fixture_name/vpkgfile" | vpkg install "$fixture_name"
  tap "install $fixture_name"

  # link
  vpkg link "$fixture_name" "$fixture_version_main"
  tap "link $fixture_name $fixture_version_main"
  v="$("$fixture_bin" --version | clean_version)"
  test "$v" = "$fixture_version_main"
  tap "check link version $v = $fixture_version_main"

  # install atl version
  vpkg install "$fixture_name" "$fixture_version_alt"
  tap "install $fixture_name $fixture_version_alt"

  # use
  vpkg-use "$fixture_name" "$fixture_version_alt"
  tap "vpkg_use $fixture_name $fixture_version_alt"
  v="$("$fixture_bin" --version | clean_version)"
  test "$v" = "$fixture_version_alt"
  tap "check link version $v = $fixture_version_alt"
 
  # unuse
  vpkg-unuse "$fixture_name" "$fixture_version_alt"
  tap "vpkg_unuse $fixture_name $fixture_version_alt"
  v="$("$fixture_bin" --version | clean_version)"
  test "$v" = "$fixture_version_main"
  tap "check link version $v = $fixture_version_main"

  # uninstall / unlink
  vpkg uninstall "$fixture_name" "$fixture_version_main"
  tap "uninstall $fixture_name $fixture_version_main"
  test ! -e "$VPKG_ROOT"/bin/"$fixture_bin"
  tap "bin link was removed"
  test ! -e "$VPKG_ROOT"/lib/"$fixture_name"/versions/current
  tap "version link was removed"
  test ! -e "$VPKG_ROOT"/lib/"$fixture_name"/versions/"$fixture_version_main"
  tap "version $fixture_version_main was uninstalled"
  
  # link alt
  vpkg link "$fixture_name" "$fixture_version_alt"
  tap "link $fixture_name $fixture_version_alt"
  v="$("$fixture_bin" --version | clean_version)"
  test "$v" = "$fixture_version_alt"
  tap "check link version $v = $fixture_version_alt"
}

# sans vpkgfile
test_no_vpkgfile() {
  fixture_name="no-vpkgfile"
  fixture_version="0.0.1"
  fixture_version_alt="0.0.2"
  
  # setup
  pkg="$VPKG_ROOT"/lib/"$fixture_name"
  mkdir -p "$pkg"
  cp -R fixtures/"$fixture_name" "$pkg"/src
  tap "copy no-vpkgfile src into lib"
}


# test bootstrapping
test_bootstrap

# test a package with a vpkgfile
test_vpkgfile

# test a package with no vpkgfile
test_no_vpkgfile

# display a summary if we made it this far
summarize
