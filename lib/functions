#
# vpkg
#

# go to own dir
dir="$(cd "$(dirname "$BASH_SOURCE")" && pwd)"

# where should we put these default vars...?
[ -z "$VPKG_BUILD_FILE" ] && VPKG_BUILD_FILE="vpkgfile"
[ -z "$VPKG_LINK_NAME" ] && VPKG_LINK_NAME="current"

vpkg_version() {
  echo "$(basename "$(dirname "$dir")")"
}

vpkg_validate() {
  [ -z "$VPKG_ROOT" ] && echo '$VPKG_ROOT must be defined' >&2 && return 1
  [ -z "$name" ] && echo "please specify a package name" >&2 && return 1
  [ -n "$version" ] && [ "$version" == "$VPKG_LINK_NAME" ] && echo "$VPKG_LINK_NAME is a reserved version name" >&2 && return 1
  return 0
}

vpkg_lookup() {
  local name="$1"
  
  # validate
  ! vpkg_validate && return 1
  
  # TODO: lookup formula location from a package registry?
  # formula_location=""
  
  # manually input a formula location
  while [ -z "$formula_location" ]
  do
    { read -p "no formula found for $name, type a url: " formula_location; }
  done
  
  # 
  echo "$formula_location"
}

vpkg_install() {
  local name="$1"
  local version="$2"
  local pkg="$VPKG_ROOT"/lib/"$name"
  local src="$pkg"/src
  
  # validate
  ! vpkg_validate && return 1
  
  # if we don't have any source files
  if [ ! -e "$src" ] || [ -z "$(ls "$src")" ]
  then
    url="$(vpkg_lookup "$name")"
    mkdir -p "$src"
    echo "downloading $url..."
    curl -f# "$url" -o "$src"/"$VPKG_BUILD_FILE"
    [ $? != 0 ] && rm -rf "$pkg" && exit 1
    chmod +x "$src"/"$VPKG_BUILD_FILE"
  fi
  
  # only allow unspecified version if we don't have any versions already installed
  if [ -z "$version" ]
  then
    [ -e "$pkg"/versions ] && versions="$(ls "$pkg/versions")"
    [ -n "$versions" ] && echo "version(s) $versions are already installed" >&2 && return 0
  fi
  
  # is $version already installed?
  [ -e "$pkg"/versions/"$version" ] && echo "version $version is already installed" >&2 && return 1
  
  # uninstall and unlink any old versions
  vpkg_uninstall "$name" "$version" > /dev/null 2>&1
  
  # we have source files but no VPKG_BUILD_FILE
  if [ ! -e "$src"/"$VPKG_BUILD_FILE" ]
  then
  
    # require a version if installing sans VPKG_BUILD_FILE
    [ -z "$version" ] && echo "installing without a $VPKG_BUILD_FILE requires you to specify a version" >&2 && return 1
    
    # copy $src over into versions/
    cp -R "$src" "$pkg"/versions/"$version"
    
  # we have source files and VPKG_BUILD_FILE
  else
    
    # install using 
    bash "$src"/"$VPKG_BUILD_FILE" install "$@"
  fi
}

vpkg_uninstall() {
  local name="$1"
  local version="$2"
  
  # validate
  ! vpkg_validate && return 1
  [ -z "$version" ] && echo "please specify a version" >&2 && return 1
  
  # unlink if necessary
  vpkg_unlink "$name" "$version" > /dev/null 2>&1
  
  # wipe out the lib entry
  rm -rf "$VPKG_ROOT"/lib/"$name"/versions/"$version"
}

vpkg_link() {
  local name="$1"
  local version="$2"
  local pkg="$VPKG_ROOT"/lib/"$name"
  
  # validate
  ! vpkg_validate && return 1
  [ -z "$version" ] && echo "please specify a version" >&2 && return 1
  [ ! -e "$pkg"/versions/"$version" ] && echo "version $version is not installed" >&2 && return 1
  
  # unlink if necessary
  vpkg_unlink "$name" "$version" > /dev/null 2>&1
  
  # create link
  ln -s "$pkg"/versions/"$version" "$pkg"/versions/"$VPKG_LINK_NAME"
  
  # create exectuables
  ls "$pkg"/versions/"$version"/bin | while read bin
  do
    
    # link via exec
    local dest="$VPKG_ROOT"/bin/"$bin"
    echo "exec $pkg/versions/$version/bin/$bin "'$@' > "$dest"
    chmod +x "$dest"
  done
}

vpkg_unlink() {
  local name="$1"
  local version="$2"
  local pkg="$VPKG_ROOT"/lib/"$name"
  
  # validate
  ! vpkg_validate && return 1
  [ -z "$version" ] && echo "please specify a version" >&2 && return 1
  
  # is the version linked?
  [ "$(readlink "$pkg/versions/$VPKG_LINK_NAME")" != "$pkg/versions/$version" ] && echo "version $version is not linked" >&2 && return 1
  
  # remove link
  rm -rf "$pkg"/versions/"$VPKG_LINK_NAME"
  
  # remove executables
  ls "$pkg"/versions/"$version"/bin | while read bin
  do
    rm -rf "$VPKG_ROOT"/bin/"$bin"
  done
}

vpkg_use() {
  local name="$1"
  local version="$2"
  local bin="$VPKG_ROOT"/lib/"$name"/versions/"$version"/bin

  # validate
  ! vpkg_validate && return 1
  [ -z "$version" ] && echo "please specify a version" >&2 && return 1
  [ ! -e "$bin" ] echo "version $version is not installed" >&2 && return 1

  # unuse old versions
  vpkg_unuse "$name" "$version"

  # use new version
  export PATH="$bin":$PATH
}

vpkg_unuse() {
  local name="$1"
  local version="$2"
  local bin="$VPKG_ROOT"/lib/"$name"/versions/"$version"/bin

  # validate
  ! vpkg_validate && return 1
  [ -z "$version" ] && echo "please specify a version" >&2 && return 1
  
  # remove all old versions
  export PATH="$(echo "$PATH" | sed "s|$VPKG_ROOT/lib/$name/versions/[^/]*/bin:||g")"
}
